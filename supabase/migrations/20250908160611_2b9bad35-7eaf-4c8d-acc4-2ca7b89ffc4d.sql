-- Create enum for reward types
CREATE TYPE public.reward_type AS ENUM ('coupon', 'physical_reward');

-- Drop existing table and all its data
DROP TABLE IF EXISTS public.winning_codes CASCADE;

-- Create new rewards table with updated structure
CREATE TABLE public.rewards (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  reward_type public.reward_type NOT NULL,
  reward_name TEXT NOT NULL,
  code VARCHAR NOT NULL UNIQUE,
  amount NUMERIC NULL, -- Only for coupon type
  currency VARCHAR NULL DEFAULT 'EUR', -- Only for coupon type
  expiration_date TIMESTAMP WITH TIME ZONE NULL, -- Only for coupon type
  assigned_at TIMESTAMP WITH TIME ZONE NULL,
  shotguner_email VARCHAR NULL,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
);

-- Enable RLS for security
ALTER TABLE public.rewards ENABLE ROW LEVEL SECURITY;

-- Create policy to restrict access (backend only)
CREATE POLICY "Backend only access to rewards" 
ON public.rewards 
FOR ALL 
USING (false);

-- Update the get_available_winning_code function to work with rewards table
CREATE OR REPLACE FUNCTION public.get_available_winning_code()
RETURNS TEXT
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path TO 'public'
AS $$
DECLARE
  available_code TEXT;
BEGIN
  SELECT code INTO available_code 
  FROM public.rewards 
  WHERE shotguner_email IS NULL 
  ORDER BY id 
  LIMIT 1;
  
  RETURN available_code;
END;
$$;

-- Update the assign_winning_code function to work with rewards table
CREATE OR REPLACE FUNCTION public.assign_winning_code(p_code TEXT, p_shotguner_email VARCHAR)
RETURNS BOOLEAN
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path TO 'public'
AS $$
DECLARE
  updated_rows INTEGER;
BEGIN
  UPDATE public.rewards 
  SET 
    shotguner_email = p_shotguner_email,
    assigned_at = NOW()
  WHERE 
    code = p_code 
    AND shotguner_email IS NULL;
    
  GET DIAGNOSTICS updated_rows = ROW_COUNT;
  
  RETURN updated_rows > 0;
END;
$$;

-- Update the user_has_winning_code function to work with rewards table
CREATE OR REPLACE FUNCTION public.user_has_winning_code(p_shotguner_email VARCHAR)
RETURNS BOOLEAN
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path TO 'public'
AS $$
DECLARE
  code_count INTEGER;
BEGIN
  SELECT COUNT(*) INTO code_count 
  FROM public.rewards 
  WHERE shotguner_email = p_shotguner_email;
  
  RETURN code_count > 0;
END;
$$;

-- Drop the old overloaded functions that used shotguner_id (integer)
DROP FUNCTION IF EXISTS public.assign_winning_code(TEXT, INTEGER, VARCHAR);
DROP FUNCTION IF EXISTS public.user_has_winning_code(INTEGER);